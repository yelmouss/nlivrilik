'use client';

import { useState, useEffect } from 'react';
import { useSession } from 'next-auth/react';
import { useRouter } from 'next/navigation';
import { Container, Typography, Box, Paper, Grid, Divider, Chip, Button, Alert, CircularProgress, Snackbar } from '@mui/material';
import { useTheme } from '@mui/material/styles';
import AddIcon from '@mui/icons-material/Add';
import ShoppingBasketIcon from '@mui/icons-material/ShoppingBasket';
import { useTranslations } from 'next-intl';

// Composant pour afficher les détails d'une commande
import OrderCard from '@/components/OrderCard';

export default function MyOrdersPage() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const theme = useTheme();
  const t = useTranslations('Order');
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState('');
  const [snackbarSeverity, setSnackbarSeverity] = useState('success');
  
  // Fonction pour charger les commandes
  const fetchOrders = async () => {
    try {
      setLoading(true);
      const response = await fetch('/api/orders');
      const data = await response.json();
      
      if (data.success) {
        setOrders(data.orders);
      } else {
        setError(data.message || t('errorLoadingOrders'));
      }
    } catch (err) {
      setError(t('errorLoadingOrders'));
      console.error(err);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    // Rediriger vers la page de connexion si non authentifié
    if (status === 'unauthenticated') {
      router.push('/auth/signin');
    }
    
    // Charger les commandes si l'utilisateur est authentifié
    if (status === 'authenticated') {
      fetchOrders();
    }
  }, [status, router, t]);
  
  // Fonction pour mettre à jour le statut d'une commande
  const handleStatusChange = async (orderId, newStatus) => {
    try {
      const response = await fetch('/api/orders', {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          orderId,
          status: newStatus
        }),
      });
      
      const data = await response.json();
      
      if (response.ok) {
        // Mettre à jour la liste des commandes
        await fetchOrders();
        
        // Afficher un message de succès
        setSnackbarMessage(t('statusUpdateSuccess'));
        setSnackbarSeverity('success');
      } else {
        // Afficher un message d'erreur
        setSnackbarMessage(data.message || t('statusUpdateError'));
        setSnackbarSeverity('error');
      }
    } catch (error) {
      console.error('Erreur lors de la mise à jour du statut:', error);
      setSnackbarMessage(t('statusUpdateError'));
      setSnackbarSeverity('error');
    } finally {
      setSnackbarOpen(true);
    }
  };
  
  // Fermer le snackbar
  const handleSnackbarClose = () => {
    setSnackbarOpen(false);
  };

  if (status === 'loading' || loading) {
    return (
      <Container sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '60vh' }}>
        <CircularProgress />
      </Container>
    );
  }

  return (
    <Container maxWidth="lg" sx={{ mt: 4, mb: 8 }}>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 4 }}>
        <Typography variant="h4" component="h1" sx={{ color: theme.palette.custom.darkTeal, fontWeight: 700 }}>
          {t('myOrders')}
        </Typography>
        
        <Button 
          variant="contained" 
          color="primary" 
          startIcon={<AddIcon />}
          onClick={() => router.push('/order')}
        >
          {t('newOrder')}
        </Button>
      </Box>
      
      {error && (
        <Alert severity="error" sx={{ mb: 3 }}>
          {error}
        </Alert>
      )}
      
      {orders.length === 0 && !loading && !error ? (
        <Paper sx={{ p: 4, textAlign: 'center' }}>
          <ShoppingBasketIcon sx={{ fontSize: 60, color: theme.palette.text.secondary, mb: 2 }} />
          <Typography variant="h6" gutterBottom>
            {t('noOrdersYet')}
          </Typography>
          <Typography variant="body1" color="textSecondary" paragraph>
            {t('placeYourFirstOrder')}
          </Typography>
          <Button 
            variant="contained" 
            color="primary"
            startIcon={<AddIcon />}
            onClick={() => router.push('/order')}
          >
            {t('placeOrder')}
          </Button>
        </Paper>
      ) : (
        <Box>
          {orders.map((order) => (
            <OrderCard 
              key={order._id} 
              order={order} 
              onStatusChange={handleStatusChange}
            />
          ))}
        </Box>
      )}
      
      <Snackbar
        open={snackbarOpen}
        autoHideDuration={6000}
        onClose={handleSnackbarClose}
      >
        <Alert onClose={handleSnackbarClose} severity={snackbarSeverity} sx={{ width: '100%' }}>
          {snackbarMessage}
        </Alert>
      </Snackbar>
    </Container>
  );
}
